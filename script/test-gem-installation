#! /usr/bin/env ruby
# frozen_string_literal: true

#
#  this script is intended to run as part of the CI test suite.
#
#  it inspects the filesystem of a selma gem installation to ensure it's complete, and
#  doesn't install anything we don't expect.
#
#  this file isn't in the `test/` subdirectory because it's intended to be run standalone against an
#  installed gem (and not against the source code or behavior of the gem itself).
#

# this line needs to come before the bundler bit, to assert that we're running against an
# already-installed version (and not some other version that bundler/inline might install if it came
# first)
gemspec = Gem::Specification.find_all_by_name("selma").sort_by(&:version).last
raise "could not find installed gem" unless gemspec

require "bundler/inline"

gemfile do
  source "https://rubygems.org"
  gem "minitest"
  gem "minitest-reporters"
  gem "selma"
end

require "selma"
require "yaml"

if ARGV.include?("-v")
  puts "---------- Selma version info ----------"
  puts Selma::VERSION
  puts
  puts "---------- Selma installed gemspec ----------"
  puts gemspec.to_ruby
  puts
end

require "minitest/autorun"
require "minitest/reporters"
Minitest::Reporters.use!([Minitest::Reporters::SpecReporter.new])

puts "Testing #{gemspec.full_name} installed in #{gemspec.base_dir}"
describe gemspec.full_name do
  let(:ruby_maj_min) { Gem::Version.new(::RUBY_VERSION).segments[0..1].join(".") }
  let(:selma_lib_dir) { File.join(gemspec.gem_dir, "lib/selma") }
  let(:selma_ext_dir) { File.join(gemspec.gem_dir, "ext/selma") }
  let(:selma_include_dir) { File.join(selma_ext_dir, "include") }

  # representative sample of the files
  let(:selma_files) { ["Cargo.toml"] }

  # it "loads the same version as the spec we've loaded" do
  #   assert_equal(Selma::VERSION, gemspec.version.to_s)
  # end

  describe "cruby" do
    it "installs selma files" do
      selma_files.each do |file|
        assert(File.file?(File.join(selma_ext_dir, file)),
          "expected #{file} to be installed in #{selma_ext_dir}")
      end
    end
  end
end
